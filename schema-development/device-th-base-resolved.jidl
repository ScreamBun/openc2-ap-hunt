     package:  "https://praxiseng.com/threat-hunter-9001"
     version:  "0-wd01"
       title:  "Threat Hunting Profile"
 description:  "Data definitions for Threat Hunting (TH) functions"
     exports:  ["OpenC2-Command", "OpenC2-Response"]

OpenC2-Command = Record                 // The Command defines an Action to be performed on a Target
    1  action      Action               // The task or activity to be performed (i.e., the 'verb').
    2  target      Target               // The object of the Action. The Action is performed on the Target.
    3  args        Args optional        // Additional information that applies to the Command.
    4  actuator    Actuator optional    // The subject of the Action. The Actuator executes the Action on the Target.
    5  command_id  Command-ID optional  // An identifier of this Command.

OpenC2-Response = Map{1..*}
    1  status       Status-Code       // An integer status code
    2  status_text  String optional   // A free-form human-readable description of the Response status
    3  results      Results optional  // Map of key:value pairs that contain additional results based on the invoking Command.

Action = Enumerated // Actions available to this Profile
    3  query        // Initiate a request for information.
   30  investigate  // Task the recipient to aggregate and report information as it pertains to a security event or incident.

Target = Choice
    9  features  Features      // A set of items used with the query Action to determine an Actuator's capabilities.
 1036  th/       AP-Target$th  // Threat Hunting Profile-defined targets

Args = Map{1..*}
    1  start_time          Date-Time optional
    2  stop_time           Date-Time optional
    3  duration            Duration optional
    4  response_requested  Response-Type optional
 1036  th/                 AP-Args$th

Actuator = Choice
 1036  th/  AP-Specifiers$th  // TH-defined actuator specifiers

Results = Map{1..*}                             // Response Results
    1  versions    Results$Versions optional    // List of OpenC2 language versions supported by this Actuator
    2  profiles    Results$Profiles optional    // List of profiles supported by this Actuator
    3  pairs       Action-Targets optional      // Targets applicable to each supported Action
    4  rate_limit  Results$Rate-limit optional  // Maximum number of requests per minute supported by design or policy
 1036  th/         AP-Results$th optional       // TH-defined results

Action-Targets = ArrayOf(Pairs)

Pairs = Enumerated
    3  query: features, /huntbooks, /datasources  //
   30  investigate: /hunt                         //

AP-Target$th = Choice                         // TH targets defined in this profile
    1  hunt         String                    // A procedure to find a set of entities in the monitored environment that associates with a cyberthreat
    2  huntbooks    Huntbook-Specifiers$th    // TH Huntbook specifiers
    3  datasources  Datasource-Specifiers$th  // You must identify one or more available data sources for hunting. These maybe a host monitor, an EDR, a SIEM, a firewall, etc.

AP-Args$th = Map              // TH command arguments defined in this profile
    1  huntargs  Huntargs$th  // Arguments for use in conjunction with huntbook implementation

Huntargs$th = Record{1..*}                          // TH command arguments defined in this profile
    1  string_arg     String optional               // string arguments supplied as huntargs
    2  integer_arg    Integer optional              // integer arguments supplied as huntargs
    3  time_arg       AP-Args$Time-arg$th optional  // OpenC2 formatted Date-Time arguments supplied as huntargs
    4  stix/          AP-Args$Stix$th optional      // stix arguments supplied as huntargs
    5  timerange      Stix-Timerange$th             // a Stix timerange used in the execution of a hunt
    6  path           String optional               // path supplied as a huntarg
    7  datasource     Huntargs$th$Datasource        // Date-Time arguments supplied as huntargs
    8  hunt_process/  Hunt-Process$th optional      // process targeted by hunt activity: specify type.
    9  ipv4_address   IPv4-Addr optional            // IPv4 address as defined in [RFC0791]
   10  ipv6_address   IPv6-Addr optional            // IPv6 address as defined in [RFC8200]
   11  ipv4_network   IPv4-Net optional             // ipv4 network targeted by hunt activity
   12  ipv6_network   IPv6-Net optional             // ipv6 network targeted by hunt activity
   13  endpoint       String optional               // endpoint targeted by hunt activity
   14  directory      String optional               // directory targeted by hunt activity

AP-Specifiers$th = Map{1..*}  // TH actuator specifiers (may be empty)

Huntbook-Specifiers$th = Map                       // TH Huntbook specifiers
    1  path           String optional              // Return huntbooks at and below this filesystem location (absolute path)
    2  tags           Huntbook-specifiers$th$Tags  // Return huntbooks with these keywords
    3  arg_types      Arg-Type$th                  // Return huntbooks that take these argument types
    4  arg_names      Arg-Name$th                  // Return huntbooks that take these argument types
    5  format_types   Return-Type$th optional      // Return huntbooks that produce these output types
    6  return_format  Huntbook-Section$th          // For each huntbook returned, include these data items

Datasource-Specifiers$th = Map{1..*}  // TH Datasource specifiers
    1  name  String optional  // requests information from an element with the given name

AP-Results$th = Map{1..*}                                         // TH results defined in this profile
    1  huntbook_titles   Ap-results$Huntbook-Titles$th optional   // Huntbook names returned by Query: Huntbooks
    2  huntbook_info     Ap-results$Huntbook-Info$th optional     // Structured data returned by Query: Huntbooks
    3  datasource_names  Ap-results$Datasource-Names$th optional  // Datasource identifiers returned by Query Datasources

Hunt-Process$th = Choice       // Identification of process to be targeted by Threat Hunting activity
    1  name  String optional   // targeted process name as a String
    2  uuid  String optional   // targeted process UUID
    3  pid   Integer optional  // targeted process PID

Stix-Timerange$th = Choice                            // Identification of process to be targeted by Threat Hunting activity
    1  timerange_absolute  Timerange-Abs$th optional  // Absolute timerange, defined by a start and end time in ISO 8601 format
    2  timerange_relative  Timerange-Rel$th optional  // Relative timerange, example '3, Days' for last 3 days

Time-Unit$th = Enumerated  // Units referenced by relative time arguments
    1  Days     //
    2  Hours    //
    3  Minutes  //
    4  Seconds  //

Timerange-Abs$th = Record{2..*}                           // String representation of ISO 8601 time
    1  hunt_start_time  Timerange-abs$th$Hunt-start-time  // Start time, as a Stix time string
    2  hunt_stop_time   Timerange-abs$th$Hunt-stop-time   // Stop time, as a Stix time string

Timerange-Rel$th = Record{2..*} // String representation of ISO 8601 time
    1  number     Integer       // Start time, as a Stix time string
    2  time_unit  Time-Unit$th  // Start time, as a Stix time string

Arg-Type$th = String  // Argument types used by a Huntbook. Follow STIX naming conventions, with lowercase characters and hyphens replacing spaces. Common types include process, file, and network-traffic

Arg-Name$th = String  // Argument types used by a Huntbook. Follow C variable naming conventions. Examples include name, src_port, and x_unique_id

Return-Type$th = Record{2..*} // Variable names and types expected as returns when using a huntbook.
    1  var_name  Arg-Name$th  // Variable name to be returned by use of Huntbook
    2  var_type  Arg-Type$th  // Type of data to be returned by use of Huntbook

Huntbook-Section$th = Enumerated  // Data format to be returned by Query Huntbooks. If none specified, return all.
    1  path              // Specifies the return should include the path to each Huntbook specified by the query conditions
    2  uniqueId          // Specifies the return should include the ID of each Huntbook specified by the query conditions
    3  args              // Specifies the returned data should include the required arguments for the available Huntbooks
    4  expected_returns  // Specifies the returned data should include the expected returns for the available Huntbooks
    5  script            // Specifies the returned data should include the full text of the Huntflow for each available Huntbook

Ap-results$Huntbook-Info$th = Record{1..*}                             // Structured data returned by Query: Huntbooks with specifiers for specific info
    1  path              String optional                               // Path used to identify a Huntbook in place of a name
    2  uniqueId          Integer optional                              // Unique ID associated with a specified Huntbook
    3  args              Ap-results$huntbook-info$th$Args optional     // a list of arguments used in the specified Huntflow
    4  expected_returns  Ap-results$huntbook-info$th$Expected-returns  // Data returned by the specified Huntbooks
    5  script            String optional                               // Text of Hunt logic imlemented by specified Huntbook

StixObject$th = ArrayOf(String){1..*}  // Stix cyber observables used in threat hunting. link to STIX table HERE

AP-Args$Time-arg$th = ArrayOf(Date-Time)  // time arguments supplied as huntargs

AP-Args$Stix$th = ArrayOf(StixObject$th)  // stix arguments supplied as huntargs

Ap-results$Huntbook-Titles$th = ArrayOf(String)  // Huntbook names returned by query huntbooks

Ap-results$Datasource-Names$th = ArrayOf(String)  // Datasource identifiers returned by query datasources

Features = ArrayOf(Feature){0..10} unique  // An array of zero to ten names used to query a Consume for its supported capabilities.

IPv4-Net = Array /ipv4-net  // IPv4 address and prefix length
    1  IPv4-Addr         // ipv4_addr:: IPv4 address as defined in [[RFC0791]](#rfc0791)
    2  Integer optional  // prefix_length:: CIDR prefix-length. If omitted, refers to a single host address.

IPv6-Net = Array /ipv6-net  // IPv6 address and prefix length
    1  IPv6-Addr         // ipv6_addr:: IPv6 address as defined in [[RFC8200]](#rfc8200)
    2  Integer optional  // prefix_length:: prefix length. If omitted, refers to a single host address

Date-Time = Integer{0..*}  // Date and Time

Duration = Integer{0..*}  // A length of time

Feature = Enumerated  // Specifies the results to be returned from a query features Command
    1  versions    // List of OpenC2 Language versions supported by this Consumer
    2  profiles    // List of profiles supported by this Consumer
    3  pairs       // List of supported Actions and applicable Targets
    4  rate_limit  // Maximum number of Commands per minute supported by design or policy

IPv4-Addr = Binary /ipv4-addr  // 32 bit IPv4 address as defined in [[RFC0791]](#rfc0791)

IPv6-Addr = Binary /ipv6-addr  // 128 bit IPv6 address as defined in [[RFC8200]](#rfc8200)

Nsid = String{1..16}  // A short identifier that refers to a namespace.

Response-Type = Enumerated
    0  none      // No response
    1  ack       // Respond when Command received
    2  status    // Respond with progress toward Command completion
    3  complete  // Respond when all aspects of Command completed

Status-Code = Enumerated.ID
  102  // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it
  200  // OK:: the Command has succeeded
  201  // Created:: the Command has succeeded and a new resource has been created as a result of it
  400  // Bad Request:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax)
  401  // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials
  403  // Forbidden:: the Consumer understood the Command but refuses to authorize it
  404  // Not Found:: the Consumer has not found anything matching the Command
  500  // Internal Error:: the Consumer encountered an unexpected condition that prevented it from performing the Command
  501  // Not Implemented:: the Consumer does not support the functionality required to perform the Command
  503  // Service Unavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer

Command-ID = String (%^\S{0,36}$%)  // Command Identifier

Version = String  // Major.Minor version number

Results$Versions = ArrayOf(Version){1..10} unique  // List of OpenC2 language versions supported by this Actuator

Results$Profiles = ArrayOf(Nsid){1..*} unique  // List of profiles supported by this Actuator

Results$Rate-limit = Number{0.0..*}  // Maximum number of requests per minute supported by design or policy

Huntargs$th$Datasource = String{1..*}  // Datasource names and tags required for use with a particular Huntbook.

Huntbook-specifiers$th$Tags = String  // Return huntbooks with these keywords

Timerange-abs$th$Hunt-start-time = String (%^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z%)  // Start time, as a Stix time string

Timerange-abs$th$Hunt-stop-time = String (%^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$%)  // Stop time, as a Stix time string

Ap-results$huntbook-info$th$Args = ArrayOf(String)  // a list of arguments used in the specified Huntflow

Ap-results$huntbook-info$th$Expected-returns = MapOf(Arg-Name$th, Arg-Type$th)  // Data returned by the specified Huntbooks
